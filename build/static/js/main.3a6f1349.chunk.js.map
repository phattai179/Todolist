{"version":3,"sources":["Util/setting.js","Redux/Const/TodolistConst.js","Redux/Action/TodolistAction.js","Page/BaiTapToDoListReduxThunk/BaiTapToDoListReduxThunk.js","Page/BaiTapToDoListSaga/BaiTapToDoListSaga.js","App.js","reportWebVitals.js","Redux/Reducer/TodolistReducer.js","Services/TodolistService.js","Redux/Const/LoadingCont.js","Redux/Saga/TodolistSaga.js","Redux/Saga/rootSaga.js","Redux/Reducer/LoadingReducer.js","Redux/Reducer/rootReducer.js","index.js"],"names":["DOMAIN","STATUS_CODE","GET_TASK_LIST","GET_TASK_API_SAGA","ADD_TASK_API_SAGA","DELETE_TASK_API_SAGA","CHECK_DONE_TASK_API_SAGA","REJECT_TASK_API_SAGA","getTaskListAction","dispatch","a","Axios","url","method","data","status","type","taskList","console","log","response","BaiTapToDoListReduxThunk","props","useSelector","state","TodolistReducer","useDispatch","useState","values","taskName","errors","setState","useEffect","getTaskList","deleteTask","deleteTaskAction","checkDoneTask","err","checkDoneTaskAction","rejectTask","rejectTaskAction","className","src","alt","onSubmit","e","preventDefault","valid","trim","alert","onChange","target","name","value","newValue","newError","id","placeholder","filter","task","map","item","index","onClick","class","App","exact","path","component","BaiTapToDoListSaga","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","stateDefault","toDoListService","getTaskApi","addTaskApi","deleteTaskApi","doneTaskApi","rejectTaskApi","DISPLAY_LOADING","HIDE_LOADING","getTaskListApiAction","theoDoiActionGetTaskList","addTaskApiAction","theoDoiActionAddTask","deleteTaskApiAction","theoDoiActionDeleteTask","doneTaskApiAction","theoDoiActionCheckDoneTask","rejectTaskApiAction","theoDoiActionRejectTask","put","delay","call","takeLatest","action","rootSaga","all","TodolistSaga","isLoading","middleWareSaga","createMiddleWareSaga","rootReducer","combineReducers","LoadingReducer","store","createStore","applyMiddleware","reduxThunk","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a6f1349.chunk.js","sourcesContent":["\r\nexport const DOMAIN = 'http://svcy.myclass.vn'\r\n\r\n// export const STATUS_CODE = {\r\n//     SUCCESS : 200,\r\n//     NOT_FOUND : 404,\r\n//     SERVER_ERROR: 500 \r\n// }\r\n\r\nexport const STATUS_CODE = {\r\n    SUCCESS : 200,\r\n    NOT_FOUND: 404,\r\n    SERVER_ERROR: 500,\r\n}","export const GET_TASK_LIST = 'GET_TASK_LIST';\r\n\r\n/* ---------------------------SAGA------------------------ */\r\n\r\nexport const GET_TASK_API_SAGA = 'GET_TASK_API_SAGA';\r\nexport const ADD_TASK_API_SAGA = 'DD_TASK_API_SAGA';\r\nexport const DELETE_TASK_API_SAGA = 'DELETE_TASK_API_SAGA';\r\nexport const CHECK_DONE_TASK_API_SAGA = 'CHECK_DONE_TASK_API_SAGA';\r\nexport const REJECT_TASK_API_SAGA = 'REJECT_TASK_API_SAGA';\r\n","import Axios from 'axios'\r\nimport { DOMAIN, STATUS_CODE } from '../../Util/setting'\r\nimport { GET_TASK_LIST } from '../Const/TodolistConst'\r\n\r\nexport const getTaskListAction = () => {\r\n    return async dispatch => {\r\n\r\n        try {\r\n            let { data, status } = await Axios({\r\n                url: `${DOMAIN}/api/ToDoList/GetAllTask`,\r\n                method: 'GET'\r\n            })\r\n\r\n            if (status === STATUS_CODE.SUCCESS) {\r\n                dispatch({\r\n                    type: GET_TASK_LIST,\r\n                    taskList: data\r\n                })\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log(err.response.data)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const addTaskListAction = (taskName) => {\r\n    return async dispatch => {\r\n\r\n        try {\r\n            let { data, status } = await Axios({\r\n                url: `${DOMAIN}/api/ToDoList/AddTask\r\n                `,\r\n                method: 'POST',\r\n                data: { taskName: taskName }\r\n            })\r\n\r\n            if(status === STATUS_CODE.SUCCESS){\r\n                dispatch(getTaskListAction())\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log(err.response.data)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const deleteTaskAction = (taskName) => {\r\n    return async dispatch => {\r\n        try{\r\n            let {data, status} = await Axios({\r\n                url: `${DOMAIN}/api/ToDoList/deleteTask?taskName=${taskName}`,\r\n                method: 'DELETE'\r\n            })\r\n\r\n            if(status === STATUS_CODE.SUCCESS){\r\n                dispatch(getTaskListAction())\r\n            }\r\n\r\n        }catch(err){\r\n            console.log(err.response.data)\r\n        }\r\n    }\r\n}\r\n\r\nexport const checkDoneTaskAction = (taskName) => {\r\n    try{\r\n        return async dispatch => {\r\n            let {data, status} = await Axios({\r\n                url: `${DOMAIN}/api/ToDoList/doneTask?taskName=${taskName}`,\r\n                method: 'PUT'\r\n            })\r\n\r\n            if(status === STATUS_CODE.SUCCESS){\r\n                dispatch(getTaskListAction())\r\n            }\r\n        }\r\n        \r\n    }catch(err){\r\n        console.log(err.response.data)\r\n    }\r\n}\r\n\r\nexport const rejectTaskAction = (taskName) => {\r\n    try{\r\n        return async dispatch => {\r\n            let {data, status} = await Axios({\r\n                url: `${DOMAIN}/api/ToDoList/rejectTask?taskName=${taskName}`,\r\n                method: 'PUT'\r\n            })\r\n\r\n            if(status === STATUS_CODE.SUCCESS){\r\n                dispatch(getTaskListAction())\r\n            }\r\n        }\r\n    }catch(err) {\r\n        console.log(err.response.data)\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport style from './Todolist.css'\r\nimport Axios from 'axios'\r\nimport { addTaskListAction, getTaskListAction, deleteTaskAction, checkDoneTaskAction, rejectTaskAction } from '../../Redux/Action/TodolistAction'\r\n\r\nexport default function BaiTapToDoListReduxThunk(props) {\r\n\r\n    const { taskList } = useSelector(state => state.TodolistReducer)\r\n    const dispatch = useDispatch()\r\n\r\n    // Sử dụng useState để tạo state trên component\r\n    const [state, setState] = useState({\r\n        values: {\r\n            taskName: '',\r\n        },\r\n\r\n        errors: {\r\n            taskName: '',\r\n        }\r\n    })\r\n\r\n\r\n    // Dùng useEffect để chạy 1 lần thì component hiện ra như componentDidMount\r\n    useEffect(() => {\r\n        getTaskList()\r\n    }, [])\r\n\r\n    const renderTaskToDo = () => {\r\n        return taskList.filter(task => !task.status).map((item, index) => {\r\n            return <li key={index}>\r\n                <span>{item.taskName}</span>\r\n                <div className=\"buttons\">\r\n                    <button onClick={() => {\r\n                        deleteTask(item.taskName)\r\n                    }} type=\"button\" className=\"remove\">\r\n                        <i className=\"fa fa-trash-alt\" />\r\n                    </button>\r\n                    <button onClick={() => {\r\n                        checkDoneTask(item.taskName)\r\n                    }} type=\"button\" className=\"complete\">\r\n                        <i className=\"far fa-check-circle\" />\r\n                        <i className=\"fas fa-check-circle\" />\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        })\r\n    }\r\n\r\n    const renderTaskToDone = () => {\r\n        return taskList.filter(task => task.status).map((item, index) => {\r\n            return <li key={index}>\r\n                <span>{item.taskName}</span>\r\n                <div className=\"buttons\">\r\n                    <button onClick={() => {\r\n                        deleteTask(item.taskName)\r\n                    }} type=\"button\" className=\"remove\">\r\n                        <i className=\"fa fa-trash-alt\" />\r\n                    </button>\r\n                    <button onClick = {() =>{\r\n                        rejectTask(item.taskName)\r\n                    }} type=\"button\" className=\"complete\">\r\n                        <i class=\"far fa-undo-alt\"></i>\r\n                        <i class=\"fas fa-undo-alt\"></i>\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        })\r\n    }\r\n\r\n    // Get taskList\r\n    const getTaskList = async () => {\r\n        dispatch(getTaskListAction())\r\n    }\r\n\r\n    // Xóa Task\r\n    const deleteTask = (taskName) => {\r\n        dispatch(deleteTaskAction(taskName))\r\n    }\r\n\r\n    // checkDoneTask \r\n    const checkDoneTask = (taskName) => {\r\n        dispatch(checkDoneTaskAction(taskName))\r\n    }\r\n\r\n    // RejectTask\r\n    const rejectTask = (taskName) => {\r\n        dispatch(rejectTaskAction(taskName))\r\n    }\r\n\r\n\r\n    // ChangeInput\r\n    const handleChangeInput = (e) => {\r\n        let { name, value } = e.target\r\n\r\n        // Cập nhật giá trị mới\r\n        let newValue = { ...state.values }\r\n        newValue[name] = value\r\n\r\n        // Cập nhật lỗi\r\n        let newError = { ...state.errors }\r\n        if (value.trim() === \"\") {\r\n            newError[name] = name + \" không được bỏ trống\"\r\n        } else {\r\n            newError[name] = \"\"\r\n        }\r\n\r\n        setState({\r\n            ...state,\r\n            values: newValue,\r\n            errors: newError\r\n        })\r\n\r\n    }\r\n\r\n    // ChangeSubmit (AddTask)\r\n    const handleChangeSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        let { values, errors } = state\r\n        let valid = true;\r\n\r\n        if (values.taskName.trim() === \"\" || errors.taskName !== \"\") {\r\n            valid = false;\r\n        }\r\n\r\n        if (!valid) {\r\n            alert(\"Dữ liệu add không hợp lệ\")\r\n            return\r\n        }\r\n\r\n        dispatch(addTaskListAction(values.taskName))\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            {/* <button className=\"btn btn-primary\" onClick={getTaskList} >Get Todolist ReduxThunk</button> */}\r\n\r\n            <div className=\"card__header\">\r\n                <img src=\"./img/X2oObC4.png\" alt=\"123\" />\r\n            </div>\r\n            {/* CardBody */}\r\n            <form onSubmit={handleChangeSubmit} className=\"card__body\">\r\n                <div className=\"card__content\">\r\n                    <div className=\"card__title\">\r\n                        <h2>My Tasks</h2>\r\n                        <p>September 9,2020</p>\r\n                    </div>\r\n\r\n                    <div className=\"card__add\">\r\n                        <input onChange={handleChangeInput} name=\"taskName\" id=\"newTask\" type=\"text\" placeholder=\"Enter an activity...\" />\r\n                        <button type=\"submit\" id=\"addItem\">\r\n                            <i className=\"fa fa-plus\" />\r\n                        </button>\r\n                    </div>\r\n                    <p className=\"text text-danger\" >{state.errors.taskName}</p>\r\n                    <div className=\"card__todo\">\r\n                        Uncompleted tasks\r\n                        <ul className=\"todo\" id=\"todo\">\r\n                            {renderTaskToDo()}\r\n                        </ul>\r\n\r\n                        Completed tasks\r\n                        <ul className=\"todo\" id=\"completed\">\r\n                            {renderTaskToDone()}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport style from './Todolist.css'\r\nimport Axios from 'axios'\r\nimport { addTaskListAction, getTaskListAction, deleteTaskAction, checkDoneTaskAction, rejectTaskAction } from '../../Redux/Action/TodolistAction'\r\nimport { ADD_TASK_API_SAGA, CHECK_DONE_TASK_API_SAGA, DELETE_TASK_API_SAGA, GET_TASK_API_SAGA, REJECT_TASK_API_SAGA } from '../../Redux/Const/TodolistConst'\r\n\r\nexport default function BaiTapToDoListReduxThunk(props) {\r\n\r\n    const { taskList } = useSelector(state => state.TodolistReducer)\r\n    const dispatch = useDispatch()\r\n\r\n    // Sử dụng useState để tạo state trên component\r\n    const [state, setState] = useState({\r\n        values: {\r\n            taskName: '',\r\n        },\r\n\r\n        errors: {\r\n            taskName: '',\r\n        }\r\n    })\r\n\r\n\r\n    // Dùng useEffect để chạy 1 lần thì component hiện ra như componentDidMount\r\n    useEffect(() => {\r\n        getTaskList()\r\n    }, [])\r\n\r\n    const renderTaskToDo = () => {\r\n        return taskList.filter(task => !task.status).map((item, index) => {\r\n            return <li key={index}>\r\n                <span>{item.taskName}</span>\r\n                <div className=\"buttons\">\r\n                    <button onClick={() => {\r\n                        deleteTask(item.taskName)\r\n                    }} type=\"button\" className=\"remove\">\r\n                        <i className=\"fa fa-trash-alt\" />\r\n                    </button>\r\n                    <button onClick={() => {\r\n                        checkDoneTask(item.taskName)\r\n                    }} type=\"button\" className=\"complete\">\r\n                        <i className=\"far fa-check-circle\" />\r\n                        <i className=\"fas fa-check-circle\" />\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        })\r\n    }\r\n\r\n    const renderTaskToDone = () => {\r\n        return taskList.filter(task => task.status).map((item, index) => {\r\n            return <li key={index}>\r\n                <span>{item.taskName}</span>\r\n                <div className=\"buttons\">\r\n                    <button onClick={() => {\r\n                        deleteTask(item.taskName)\r\n                    }} type=\"button\" className=\"remove\">\r\n                        <i className=\"fa fa-trash-alt\" />\r\n                    </button>\r\n                    <button onClick={() => {\r\n                        rejectTask(item.taskName)\r\n                    }} type=\"button\" className=\"complete\">\r\n                        <i class=\"far fa-undo-alt\"></i>\r\n                        <i class=\"fas fa-undo-alt\"></i>\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        })\r\n    }\r\n\r\n    // Get taskList\r\n    const getTaskList = () => {\r\n        // Dispatch action saga\r\n\r\n        dispatch({\r\n            type: GET_TASK_API_SAGA,\r\n        })\r\n    }\r\n\r\n    // Xóa Task\r\n    const deleteTask = (taskName) => {\r\n        // Dispatch action saga\r\n\r\n        dispatch({\r\n            type: DELETE_TASK_API_SAGA,\r\n            taskName: taskName\r\n        })\r\n    }\r\n\r\n    // checkDoneTask \r\n    const checkDoneTask = (taskName) => {\r\n        // Dispatch action saga\r\n\r\n        dispatch({\r\n            type: CHECK_DONE_TASK_API_SAGA,\r\n            taskName\r\n        })\r\n    }\r\n\r\n    // RejectTask\r\n    const rejectTask = (taskName) => {\r\n        dispatch({\r\n            type: REJECT_TASK_API_SAGA,\r\n            taskName\r\n        })\r\n    }\r\n\r\n\r\n    // ChangeInput\r\n    const handleChangeInput = (e) => {\r\n        let { name, value } = e.target\r\n\r\n        // Cập nhật giá trị mới\r\n        let newValue = { ...state.values }\r\n        newValue[name] = value\r\n\r\n        // Cập nhật lỗi\r\n        let newError = { ...state.errors }\r\n        if (value.trim() === \"\") {\r\n            newError[name] = name + \" không được bỏ trống\"\r\n        } else {\r\n            newError[name] = \"\"\r\n        }\r\n\r\n        setState({\r\n            ...state,\r\n            values: newValue,\r\n            errors: newError\r\n        })\r\n\r\n    }\r\n\r\n    // ChangeSubmit (AddTask)\r\n    const handleChangeSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        let { values, errors } = state\r\n        let valid = true;\r\n\r\n        if (values.taskName.trim() === \"\" || errors.taskName !== \"\") {\r\n            valid = false;\r\n        }\r\n\r\n        if (!valid) {\r\n            alert(\"Dữ liệu add không hợp lệ\")\r\n            return\r\n        }\r\n\r\n        // Dispatch action saga\r\n        dispatch({\r\n            type: ADD_TASK_API_SAGA,\r\n            taskName: values.taskName\r\n        })\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <button className=\"btn btn-primary\" onClick={getTaskList} >Get Todolist ReduxThunk</button>\r\n\r\n            <div className=\"card__header\">\r\n                <img src=\"./img/X2oObC4.png\" alt=\"123\"/>\r\n            </div>\r\n            {/* CardBody */}\r\n            <form onSubmit={handleChangeSubmit} className=\"card__body\">\r\n                <div className=\"card__content\">\r\n                    <div className=\"card__title\">\r\n                        <h2>My Tasks</h2>\r\n                        <p>September 9,2020</p>\r\n                    </div>\r\n\r\n                    <div className=\"card__add\">\r\n                        <input onChange={handleChangeInput} name=\"taskName\" id=\"newTask\" type=\"text\" placeholder=\"Enter an activity...\" />\r\n                        <button type=\"submit\" id=\"addItem\">\r\n                            <i className=\"fa fa-plus\" />\r\n                        </button>\r\n                    </div>\r\n                    <p className=\"text text-danger\" >{state.errors.taskName}</p>\r\n                    <div className=\"card__todo\">\r\n                        {/* Uncompleted tasks */}\r\n                        <ul className=\"todo\" id=\"todo\">\r\n                            {renderTaskToDo()}\r\n                        </ul>\r\n\r\n                        {/* Completed tasks */}\r\n                        <ul className=\"todo\" id=\"completed\">\r\n                            {renderTaskToDone()}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport BaiTapToDoListReduxThunk from './Page/BaiTapToDoListReduxThunk/BaiTapToDoListReduxThunk';\nimport BaiTapToDoListSaga from './Page/BaiTapToDoListSaga/BaiTapToDoListSaga';\n// import LoadingComponent from './Components/GlobalSetting/LoadingComponent';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      {/* <LoadingComponent /> */}\n      <Switch>\n        <Route exact path='/todolistreduxthunk' component={BaiTapToDoListReduxThunk}></Route>\n        <Route exact path='/todolistsaga' component={BaiTapToDoListSaga} ></Route>\n        <Route path=\"*\" component={BaiTapToDoListReduxThunk} ></Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { GET_TASK_LIST } from \"../Const/TodolistConst\"\r\n\r\nconst stateDefault = {\r\n    taskList: []\r\n}\r\n\r\nexport const TodolistReducer = (state = stateDefault, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case GET_TASK_LIST: {\r\n            return { ...state, taskList: action.taskList }\r\n\r\n        }\r\n\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n","import Axios from 'axios'\r\nimport { DOMAIN } from '../Util/setting'\r\n\r\nexport class TodolistService {\r\n    getTaskApi = () => {\r\n        return Axios({\r\n            url: `${DOMAIN}/api/ToDoList/GetAllTask`,\r\n            method: 'GET'\r\n        })\r\n    }\r\n\r\n    addTaskApi = (taskName) => {\r\n        return Axios({\r\n            url: `${DOMAIN}/api/ToDoList/AddTask`,\r\n            method: 'POST',\r\n            data: {taskName: taskName}\r\n        })\r\n    }\r\n\r\n    deleteTaskApi = (taskName) => {\r\n        return Axios({\r\n            url: `${DOMAIN}/api/ToDoList/deleteTask?taskName=${taskName}`,\r\n            method: 'DELETE'\r\n        })\r\n    }\r\n\r\n    doneTaskApi = (taskName) => {\r\n        return Axios({\r\n            url:`${DOMAIN}/api/ToDoList/doneTask?taskName=${taskName}`,\r\n            method: 'PUT'\r\n        })\r\n    }\r\n\r\n    rejectTaskApi = (taskName) => {\r\n        return Axios({\r\n            url: `${DOMAIN}/api/ToDoList/rejectTask?taskName=${taskName}`,\r\n            method: 'PUT'\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const toDoListService = new TodolistService();","export const DISPLAY_LOADING = 'DISPLAY_LOADING';\r\nexport const HIDE_LOADING = 'HIDE_LOADING'","import { call, delay, fork, put, take, takeEvery, takeLatest } from 'redux-saga/effects'\r\nimport Axios from 'axios'\r\nimport { DOMAIN, STATUS_CODE } from '../../Util/setting'\r\nimport { ADD_TASK_API_SAGA, CHECK_DONE_TASK_API_SAGA, DELETE_TASK_API_SAGA, GET_TASK_API_SAGA, GET_TASK_LIST, REJECT_TASK_API_SAGA } from '../Const/TodolistConst'\r\nimport { toDoListService } from '../../Services/TodolistService'\r\nimport { DISPLAY_LOADING, HIDE_LOADING } from '../Const/LoadingCont'\r\n\r\n\r\n// redux 2 loại action: \r\n// action => object (action thường)\r\n// action => function (middleWare thường dùng để xử lý api hoặc gọi các action khác)\r\n\r\n// Chức năng getTaskLiat\r\n\r\nfunction* getTaskListApiAction() { // function được xem như 1 action\r\n\r\n    // while (true) {\r\n    //     yield take('getTaskListApi'); // Theo dõi action => Xem action nào dispatch mới làm các công việc bên dưới\r\n    //     console.log('getTaskApi')\r\n    // }\r\n\r\n    // yield delay(2000) // Đợi sau 2s sẽ chạy các hàm phía dưới . Vd nhấn nút 4 lần dispatch sẽ sau 2s sẽ hiển thị 4 console.log\r\n    // console.log('yield takeLastest & takevery')\r\n\r\n    // put giống dispatch action\r\n    // Gọi dispatch display_loading để hiện thị loading khi dữ liệu từ server chưa dc gửi về\r\n    yield put({\r\n        type: DISPLAY_LOADING\r\n    })\r\n\r\n    yield delay(1000)\r\n\r\n    try {\r\n        // yield call nhận vào 1 hàm trả về promise\r\n        let { data, status } = yield call(toDoListService.getTaskApi)\r\n\r\n\r\n        if (status === STATUS_CODE.SUCCESS) {\r\n            // Sau khi lấy giá trị thành công dùng put (giống dispatch bên thunk)\r\n            yield put({\r\n                type: GET_TASK_LIST,\r\n                taskList: data\r\n            })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n    // Ẩn loading sau khi đã dispatch gàm GET_TASK_LIST lấy dc giá trị về\r\n    yield put({\r\n        type: HIDE_LOADING\r\n    })\r\n\r\n}\r\n\r\n\r\nexport function* theoDoiActionGetTaskList() {\r\n    // yield fork // Hàm lắng nghe action dùng để gọi action và là null locking chạy không cần chờ\r\n    //yield fork(getTaskListApiAction)\r\n\r\n    // yield takeEvery\r\n    //yield takeEvery('getTaskListApi', getTaskListApiAction) // Hàm kết hợp fork và take là lắng nghe và gọi đến action. Nhưng nó nếu gọi nhiều lần sẽ trả về nhiều lần. Vd nhấn nút 10 lần thì sẽ trả về lấn lượt 10 giá trị nên khi dispatch lên sẽ không chính xác \r\n\r\n    yield takeLatest(GET_TASK_API_SAGA, getTaskListApiAction) // Giống hàm takeEvery Hám này kết hợp giữa fork và take là lắng nghe và gọi đến action và theo dõi action đó khi nó được thực thu // Kết hợp với delay dù có nhấn 10 lần nút dispatch thì chỉ hiển thị cái thứ 10\r\n\r\n}\r\n\r\n\r\n// Chức năng Add task\r\n\r\nfunction* addTaskApiAction(action) {\r\n\r\n    let { taskName } = action\r\n\r\n    // Gọi Api\r\n    // yield call nhận vào 1 hàm trả về promise\r\n\r\n    try {\r\n        let { data, status } = yield call(() => {\r\n            return toDoListService.addTaskApi(taskName)\r\n        })\r\n\r\n        // Nếu thành công thì gọi lại action GET_TASKLIST_API (action saga thực thi)\r\n        if (status === STATUS_CODE.SUCCESS) {\r\n            yield put({\r\n                type: GET_TASK_API_SAGA\r\n            })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n\r\nexport function* theoDoiActionAddTask() {\r\n    yield takeLatest(ADD_TASK_API_SAGA, addTaskApiAction)\r\n}\r\n\r\n// Chức năng xóa task\r\n\r\nfunction* deleteTaskApiAction(action) {\r\n    let { taskName } = action\r\n\r\n    // Gọi Api\r\n    try {\r\n        let { data, status } = yield call(() => {\r\n            return toDoListService.deleteTaskApi(taskName)\r\n        })\r\n\r\n        if (status === STATUS_CODE.SUCCESS) {\r\n            yield put({\r\n                type: GET_TASK_API_SAGA\r\n            })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n\r\nexport function* theoDoiActionDeleteTask() {\r\n    yield takeLatest(DELETE_TASK_API_SAGA, deleteTaskApiAction)\r\n}\r\n\r\n// Chức năng checkDoneTask\r\n\r\nfunction* doneTaskApiAction(action) {\r\n    let { taskName } = action\r\n\r\n    // Gọi Api\r\n    try {\r\n        let { data, status } = yield call(() => {\r\n            return toDoListService.doneTaskApi(taskName)\r\n        })\r\n\r\n        console.log('data', data)\r\n\r\n        if (status === STATUS_CODE.SUCCESS) {\r\n            yield put({\r\n                type: GET_TASK_API_SAGA\r\n            })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n\r\nexport function* theoDoiActionCheckDoneTask() {\r\n    yield takeLatest(CHECK_DONE_TASK_API_SAGA, doneTaskApiAction)\r\n}\r\n\r\n// Chức năng rejectTask\r\n\r\nfunction* rejectTaskApiAction(action) {\r\n    let { taskName } = action\r\n\r\n    // Gọi api\r\n    try {\r\n        let { data, status } = yield call(() => {\r\n            return toDoListService.rejectTaskApi(taskName)\r\n        })\r\n\r\n        if (status === STATUS_CODE.SUCCESS) {\r\n            yield put({\r\n                type: GET_TASK_API_SAGA\r\n            })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n\r\n}\r\n\r\nexport function* theoDoiActionRejectTask() {\r\n    yield takeLatest(REJECT_TASK_API_SAGA, rejectTaskApiAction)\r\n}","import { all } from 'redux-saga/effects'\r\nimport * as TodolistSaga from './TodolistSaga'\r\n\r\n\r\nexport function* rootSaga() {\r\n    // Nghiệp vụ theo dõi các action saga todolist\r\n    yield all([\r\n        TodolistSaga.theoDoiActionGetTaskList(),\r\n        TodolistSaga.theoDoiActionAddTask(),\r\n        TodolistSaga.theoDoiActionDeleteTask(),\r\n        TodolistSaga.theoDoiActionCheckDoneTask(),\r\n        TodolistSaga.theoDoiActionRejectTask()\r\n        // Nghiệp vụ khác thì cứ import rồi . đến\r\n\r\n    ])\r\n\r\n\r\n}","\r\nimport {DISPLAY_LOADING, HIDE_LOADING} from '../Const/LoadingCont'\r\n\r\nconst stateDefault = {\r\n    isLoading: true\r\n}\r\n\r\nexport const LoadingReducer = (state = stateDefault, action) => {\r\n\r\n    switch(action.type){\r\n        case DISPLAY_LOADING: {\r\n            state.isLoading = true;\r\n            return {...state}\r\n        }\r\n\r\n        case HIDE_LOADING: {\r\n            state.isLoading = false\r\n            return {...state}\r\n        }\r\n\r\n        default : return {...state}\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport { TodolistReducer } from './TodolistReducer';\r\n\r\nimport reduxThunk from 'redux-thunk'\r\nimport createMiddleWareSaga from 'redux-saga'\r\nimport {rootSaga} from '../Saga/rootSaga'\r\nimport { LoadingReducer } from './LoadingReducer';\r\n\r\n// import createMiddleWareSaga from 'redux-saga'\r\n// import { rootSaga } from '../Saga/rootSaga';\r\n// const middleWareSaga = createMiddleWareSaga();\r\n\r\nconst middleWareSaga = createMiddleWareSaga()\r\n\r\nconst rootReducer = combineReducers({\r\n    TodolistReducer,\r\n    LoadingReducer\r\n    \r\n    \r\n})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(reduxThunk, middleWareSaga))\r\n\r\nmiddleWareSaga.run(rootSaga)\r\n\r\n//middleWareSaga.run(rootSaga)\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Cài đặt redux\nimport { Provider } from 'react-redux'\nimport store from './Redux/Reducer/rootReducer'\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}